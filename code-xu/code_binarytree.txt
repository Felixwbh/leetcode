https://www.jianshu.com/p/0190985635eb

二叉树的数据结构
-*- coding:utf-8 -*-
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


1.二叉树的前序遍历
# 递归
class Solution:
    def preorder(self, root):
        if not root:
            return []
        return [root.val] + self.preorder(root.left) + self.preorder(root.right)
# 非递归


2.二叉树的中序遍历
# 递归
class Solution:
    def inorder(self, root):
        if not root:
            return []
        return self.inorder(root.left) + [root.val] + self.inorder(root.right)
# 非递归


3.二叉树的后序遍历
# 递归
class Solution:
    def postorder(self, root):
        if not root:
            return []
        return self.postorder(root.left) + self.postorder(root.right) + [root.val]
# 非递归


4.二叉树的层次遍历/从上到下打印二叉树
# https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&tqId=11175&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 从上往下打印出二叉树的每个节点，同层节点从左至右打印。
class Solution:
    # 返回从上到下每个节点值列表，例：[1,2,3]
    def PrintFromTopToBottom(self, root):
        # write code here
        if not root:
            return []
        res = []
        queue = [root]
        while queue:
            node = queue.pop(0)
            res.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return res

class Solution:
    # 返回从上到下每个节点值列表，例：[1,2,3]
    def PrintFromTopToBottom(self, root):
        # write code here
        if not root:
            return []
        res = []
        currStack = [root]
        while currStack:
            nextStack = []
            for node in currStack:
                res.append(node.val)
                if node.left:
                    nextStack.append(node.left)
                if node.right:
                    nextStack.append(node.right)
            currStack = nextStack
        return res


5.把二叉树打印成多行
# https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288?tpId=13&tqId=11213&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。
class Solution:
    # 返回二维列表[[1,2],[4,5]]
    def Print(self, pRoot):
        # write code here
        if not pRoot:
            return []
        res = []
        currStack = [pRoot]
        while currStack:
            curr = []
            nextStack = []
            for node in currStack:
                curr.append(node.val)
                if node.left:
                    nextStack.append(node.left)
                if node.right:
                    nextStack.append(node.right)
            res.append(curr)
            currStack = nextStack
        return res


6.按之字形顺序打印二叉树
# https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&tqId=11212&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。
class Solution:
    def Print(self, pRoot):
        # write code here
        if not pRoot:
            return []
        res = []
        currStack = [pRoot]
        flag = True
        while currStack:
            curr = []
            nextStack = []
            flag = not flag
            for node in currStack:
                curr.append(node.val)
                if node.left:
                    nextStack.append(node.left)
                if node.right:
                    nextStack.append(node.right)
            res.append(curr[::-1] if flag else curr)
            currStack = nextStack
        return res


7.前序遍历和中序遍历构造二叉树/重建二叉树
# https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&tqId=11157&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
class Solution:
    # 返回构造的TreeNode根节点
    def reConstructBinaryTree(self, pre, tin):
        # write code here
        if not pre or not tin:
            return None
        val = pre.pop(0)
        root = TreeNode(val)
        idx = tin.index(val)
        root.left = self.reConstructBinaryTree(pre, tin[:idx])
        root.right = self.reConstructBinaryTree(pre, tin[idx+1:])
        return root


8.前序遍历和后序遍历构造二叉树


.树的子结构
# https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&tqId=11170&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
class Solution:
    def HasSubtree(self, pRoot1, pRoot2):
        # write code here
        if not pRoot1 or not pRoot2:
            return False
        res = False
        if pRoot1.val == pRoot2.val:
            res = self.compare(pRoot1, pRoot2)
        if not res:
            res = self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)
        return res
    
    def compare(self, pRoot1, pRoot2):
        if not pRoot2:
            return True
        if not pRoot1:
            return False
        if pRoot1.val == pRoot2.val:
            return self.compare(pRoot1.left, pRoot2.left) and self.compare(pRoot1.right, pRoot2.right)


.二叉树的镜像/翻转二叉树
# https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 操作给定的二叉树，将其变换为源二叉树的镜像。
class Solution:
    # 返回镜像树的根节点
    def Mirror(self, root):
        # write code here
        if not root:
            return None
        root.left, root.right = root.right, root.left
        self.Mirror(root.left)
        self.Mirror(root.right)
        return root


.二叉树的深度/求二叉树的最大深度
# https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
# 递归
class Solution:
    def TreeDepth(self, pRoot):
        # write code here
        if not pRoot:
            return 0
        return max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + 1
# 非递归
class Solution:
    def TreeDepth(self, pRoot):
        # write code here
        return self.levelorder(pRoot)
    
    def levelorder(self, root):
        if not root:
            return 0
        count = 0
        currStack = [root]
        while currStack:
            nextStack = []
            for node in currStack:
                if node.left:
                    nextStack.append(node.left)
                if node.right:
                    nextStack.append(node.right)
            currStack = nextStack
            count += 1
        return count


.求二叉树的最小深度


.求二叉树中节点的个数


.求二叉树中叶子节点的个数


.求二叉树中第k层节点的个数


.两个二叉树是否互为镜像


.平衡二叉树
# https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一棵二叉树，判断该二叉树是否是平衡二叉树。
# 自顶向下O(N2)
class Solution:
    def IsBalanced_Solution(self, pRoot):
        # write code here
        if not pRoot:
            return True
        return abs(self.TreeDepth(pRoot.left) - self.TreeDepth(pRoot.right)) <= 1 and self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)
    
    def TreeDepth(self, root):
        if not root:
            return 0
        return max(self.TreeDepth(root.left), self.TreeDepth(root.right)) + 1
# 自底向上O(N)
class Solution:
    def IsBalanced_Solution(self, pRoot):
        # write code here
        self.res = True
        self.dfs(pRoot)
        return self.res
    
    def dfs(self, root):
        if not root:
            return 0
        left = self.dfs(root.left)
        right = self.dfs(root.right)
        if abs(left - right) > 1:
            self.res = False
        return max(left, right) + 1


.判断二叉树是否是完全二叉树


.两个二叉树是否完全相同


.对称二叉树
# https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&tqId=11211&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
class Solution:
    def isSymmetrical(self, pRoot):
        # write code here
        if not pRoot:
            return True
        return self.compare(pRoot.left, pRoot.right)
    
    def compare(self, left, right):
        if not left and not right:
            return True
        elif not left or not right:
            return False
        elif left.val == right.val:
            return self.compare(left.left, right.right) and self.compare(left.right, right.left)
        return False


.二叉树中的最大路径和
# https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/
# 给定一个非空二叉树，返回其最大路径和。路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。
# 对任意一个节点, 如果最大和路径包含该节点, 只存在2种情况:
# 	左右子树中构成的路径和较大的那个，加上该节点的值后向父节点回溯构成最大路径；
# 	左右子树都在最大路径中, 加上该节点的值构成最大路径。
class Solution(object):
    def maxPathSum(self, root):
        self.res = float('-inf')
        self.dfs(root)
        return self.res
    
    def dfs(self, root):
        if not root:
            return 0
        left = max(0, self.dfs(root.left))
        right = max(0, self.dfs(root.right))
        self.res = max(self.res, left + right + root.val)
        return max(left, right) + root.val


.二叉树中和为某一值的路径
# https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca?tpId=13&tqId=11177&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
class Solution:
    # 返回二维列表，内部每个列表表示找到的路径
    def FindPath(self, root, expectNumber):
        # write code here
        if not root:
            return []
        res = []
        self.dfs(root, expectNumber, 0, [], res)
        return res
    
    def dfs(self, root, expectNumber, curSum, path, res):
        curSum += root.val
        path.append(root)
        if curSum == expectNumber and not root.left and not root.right:
            onepath = []
            for node in path:
                onepath.append(node.val)
            res.append(onepath)
        if curSum < expectNumber:
            if root.left:
                self.dfs(root.left, expectNumber, curSum, path, res)
            if root.right:
                self.dfs(root.right, expectNumber, curSum, path, res)
        path.pop()


.二叉树的下一个结点
# https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&tqId=11210&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
class TreeLinkNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
        self.next = None

class Solution:
    def GetNext(self, pNode):
        # write code here
        if pNode.right:
            pNode = pNode.right
            while pNode.left:
                pNode = pNode.left
            return pNode
        else:
            while pNode.next and pNode != pNode.next.left:
                pNode = pNode.next
            return pNode.next
        return None


.序列化二叉树
# https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84?tpId=13&tqId=11214&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 请实现两个函数，分别用来序列化和反序列化二叉树
class Solution:
    def Serialize(self, root):
        # write code here
        if not root:
            return '#'
        return str(root.val) + ',' + self.Serialize(root.left) + ',' + self.Serialize(root.right)
    
    def Deserialize(self, s):
        # write code here
        lists = s.split(',')
        return self.build(lists)
    
    def build(self, lists):
        if len(lists) <= 0:
            return None
        val = lists.pop(0)
        if val == '#':
            return None
        else:
            root = TreeNode(int(val))
            root.left = self.build(lists)
            root.right = self.build(lists)
        return root


.二叉树的最近公共祖先LCA
# https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/submissions/
# https://blog.csdn.net/maka_uir/article/details/86595576
# 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        if not root:
            return None
        if root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left and right:
            return root
        elif left:
            return left
        elif right:
            return right
        else:
            return None


.二叉搜索树的最近公共祖先LCA
# https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
# https://blog.csdn.net/qq_38575545/article/details/85239723
# 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        if p.val < root.val and q.val < root.val:
            return self.lowestCommonAncestor(root.left, p, q)
        elif p.val > root.val and q.val > root.val:
            return self.lowestCommonAncestor(root.right, p, q)
        else:
            return root


.二叉搜索树的后序遍历序列
# https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&tqId=11176&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
class Solution:
    def VerifySquenceOfBST(self, sequence):
        # write code here
        if not sequence:
            return False
        root = sequence[-1]
        i = 0
        for node in sequence[:-1]:
            if node > root:
                break
            i += 1
        for node in sequence[i:-1]:
            if node < root:
                return False
        left = True
        if i > 0:
            left = self.VerifySquenceOfBST(sequence[:i])
        right = True
        if i < len(sequence)-2:
            right = self.VerifySquenceOfBST(sequence[i:-1])
        return left and right


.二叉搜索树的第k个结点
# https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&tqId=11215&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 给定一棵二叉搜索树，请找出其中的第k小的结点。例如，（5，3，7，2，4，6，8）中，按结点数值大小顺序第三小结点的值为4
class Solution:
    # 返回对应节点TreeNode
    def KthNode(self, pRoot, k):
        # write code here
        res = self.inorder(pRoot)
        return res[k-1] if 0 < k <= len(res) else None
    
    def inorder(self, root):
        if not root:
            return []
        return self.inorder(root.left) + [root] + self.inorder(root.right)


.二叉搜索树与双向链表
# https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&tqId=11179&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
class Solution:
    def __init__(self):
        self.listHead = None
        self.listTail = None
        
    def Convert(self, pRootOfTree):
        # write code here
        if not pRootOfTree:
            return
        self.Convert(pRootOfTree.left)
        if not self.listHead:
            self.listHead = pRootOfTree
            self.listTail = pRootOfTree
        else:
            self.listTail.right = pRootOfTree
            pRootOfTree.left = self.listTail
            self.listTail = pRootOfTree
        self.Convert(pRootOfTree.right)
        return self.listHead




.在二叉树中插入节点


.二叉树的搜索区间


.二叉树内两个节点的最长距离


.不同的二叉树


.判断二叉树是否是合法的二叉查找树(BST)













