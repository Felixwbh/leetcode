https://www.jianshu.com/p/a64d1ef95980

链表的数据结构
-*- coding:utf-8 -*-
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None


1.从尾到头打印链表
# https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
# 输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
class Solution:
    def printListFromTailToHead(self, listNode):
        # write code here
        if not listNode:
            return []
        return s
		+ [listNode.val]


2.链表中倒数第k个结点
# https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
# 输入一个链表，输出该链表中倒数第k个结点。
class Solution:
    def FindKthToTail(self, head, k):
        # write code here
        p1, p2 = head, head
        for i in range(k):
            if p1:
                p1 = p1.next
            else:
                return None
        while p1:
            p1 = p1.next
            p2 = p2.next
        return p2
		


3.反转链表
# https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# https://leetcode-cn.com/problems/reverse-linked-list/
# 输入一个链表，反转链表后，输出新链表的表头。
# https://blog.csdn.net/coder_orz/article/details/51306170
class Solution:
    # 返回ListNode
    def ReverseList(self, pHead):
        # write code here
        stack = []
        while pHead:
            stack.append(pHead.val)
            pHead = pHead.next
        head = ListNode(0)
        tmp = head
        while stack:
            tmp.next = ListNode(stack.pop())
            tmp = tmp.next
        return head.next

class Solution(object):
    def reverseList(self, head):
        # dummy     head
        # None  <-  1  ->  2  ->  3  ->  4  ->  5  ->  None
        # None  <-  1  <-  2  ->  3  ->  4  ->  5  ->  None
        #           tmp    head
        #           dummy  tmp    head
        #                  dummy
        dummy = None
        while head:
            tmp = head
            head = head.next
            tmp.next = dummy
            dummy = tmp
        return dummy


.两数相加
# https://leetcode-cn.com/problems/add-two-numbers/
# 给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。如果，将这两个数相加起来，则会返回一个新的链表来表示它们的和。
# 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
# 输出：7 -> 0 -> 8
# 原因：342 + 465 = 807
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode(-1)
        tmp = dummy
        carry = 0
        while l1 or l2:
            sum = 0
            if l1:
                sum += l1.val
                l1 = l1.next
            if l2:
                sum += l2.val
                l2 = l2.next
            sum += carry
            carry, mod = divmod(sum, 10)
            tmp.next = ListNode(mod)
            tmp = tmp.next
        if carry > 0:
            tmp.next = ListNode(1)
        return dummy.next


4.合并两个排序的链表
# https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
# 非递归
class Solution:
    # 返回合并后列表
    def Merge(self, pHead1, pHead2):
        # write code here
        head = ListNode(0)
        tmp = head
        while pHead1 and pHead2:
            if pHead1.val <= pHead2.val:
                tmp.next = ListNode(pHead1.val)
                tmp = tmp.next
                pHead1 = pHead1.next
            else:
                tmp.next = ListNode(pHead2.val)
                tmp = tmp.next
                pHead2 = pHead2.next
        if pHead1:
            tmp.next = pHead1
        if pHead2:
            tmp.next = pHead2
        return head.next
# 递归
class Solution:
    # 返回合并后列表
    def Merge(self, pHead1, pHead2):
        # write code here
        if not pHead1:
            return pHead2
        if not pHead2:
            return pHead1
        if pHead1.val <= pHead2.val:
            pHead1.next = self.Merge(pHead1.next, pHead2)
            return pHead1
        else:
            pHead2.next = self.Merge(pHead1, pHead2.next)
            return pHead2

.合并K个排序链表
# https://leetcode-cn.com/problems/merge-k-sorted-lists/
# 合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if len(lists) == 0:
            return None
        if len(lists) == 1:
            return lists[0]
        mid = len(lists) / 2
        left = self.mergeKLists(lists[:mid])
        right = self.mergeKLists(lists[mid:])
        return self.Merge(left, right)
    
    def Merge(self, pHead1, pHead2):
        if not pHead1:
            return pHead2
        if not pHead2:
            return pHead1
        if pHead1.val <= pHead2.val:
            pHead1.next = self.Merge(pHead1.next, pHead2)
            return pHead1
        else:
            pHead2.next = self.Merge(pHead1, pHead2.next)
            return pHead2


.旋转链表
# https://leetcode-cn.com/problems/rotate-list/
# 给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。
# 输入: 1->2->3->4->5->NULL, k = 2
# 输出: 4->5->1->2->3->NULL
class Solution(object):
    def rotateRight(self, head, k):
    	# dummy head
        # 0     1   2   3   4   5   NULL
        # tmp   
        #                       tmp
        #                       tmp head 成环
        if not head:
            return None
        dummy = ListNode(-1)
        dummy.next = head
        tmp = dummy
        length = 0
        while tmp.next:
            length += 1
            tmp = tmp.next
        tmp.next = dummy.next
        step = length - k % length
        for i in range(step):
            tmp = tmp.next
        head = tmp.next
        tmp.next = None
        return head


.复杂链表的复制
# https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&tqId=11178&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
class RandomListNode:
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None
class Solution:
    # 返回 RandomListNode
    def Clone(self, pHead):
        # write code here
        if not pHead:
            return None
        # copy node
        dummy = pHead
        while dummy:
            dummynext = dummy.next
            copynode = RandomListNode(dummy.label)
            dummy.next = copynode
            copynode.next = dummynext
            dummy = dummynext
        # copy random
        dummy = pHead
        while dummy:
            randomnext = dummy.random
            copynode = dummy.next
            if randomnext:
                copynode.random = randomnext.next
            dummy = copynode.next
        # split link
        dummy = pHead
        dummyhead = pHead.next
        while dummy:
            copynode = dummy.next
            dummynext = copynode.next
            dummy.next = dummynext
            if dummynext:
                copynode.next = dummynext.next
            else:
                copynode.next = None
            dummy = dummynext
        return dummyhead


.二叉搜索树与双向链表
# https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&tqId=11179&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
class Solution:
    def __init__(self):
        self.listHead = None
        self.listTail = None
        
    def Convert(self, pRootOfTree):
        # write code here
        if not pRootOfTree:
            return
        self.Convert(pRootOfTree.left)
        if not self.listHead:
            self.listHead = pRootOfTree
            self.listTail = pRootOfTree
        else:
            self.listTail.right = pRootOfTree
            pRootOfTree.left = self.listTail
            self.listTail = pRootOfTree
        self.Convert(pRootOfTree.right)
        return self.listHead


.两个链表的第一个公共结点/相交链表
# https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&tqId=11189&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
# https://leetcode-cn.com/problems/intersection-of-two-linked-lists/submissions/
# 输入两个链表，找出它们的第一个公共结点。
class Solution:
    def FindFirstCommonNode(self, pHead1, pHead2):
        # write code here
        p1, p2 = pHead1, pHead2
        len1, len2 = 0, 0
        while p1:
            len1 += 1
            p1 = p1.next
        while p2:
            len2 += 1
            p2 = p2.next
        p1, p2 = pHead1, pHead2
        while len1 != len2:
            if len1 > len2:
                p1 = p1.next
                len1 -= 1
            else:
                p2 = p2.next
                len2 -= 1
        while p1 != p2:
                p1 = p1.next
                p2 = p2.next
        return p1

class Solution:
    def FindFirstCommonNode(self, pHead1, pHead2):
        # write code here
        l1, l2 = [], []
        p1, p2 = pHead1, pHead2
        while p1:
            l1.append(p1)
            p1 = p1.next
        while p2:
            l2.append(p2)
            p2 = p2.next
        res = None
        while l1 and l2:
            if l1[-1] == l2[-1]:
                res = l1.pop()
                l2.pop()
            else:
                break
        return res


.判断链表是否有环/环形链表
# https://leetcode-cn.com/problems/linked-list-cycle/
# 给定一个链表，判断链表中是否有环。
class Solution(object):
    def hasCycle(self, head):
        if not head or not head.next:
            return False
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        return False


.链表中环的入口结点/环形链表II
# https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# https://leetcode-cn.com/problems/linked-list-cycle-ii/submissions/
# 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。
class Solution:
    def EntryNodeOfLoop(self, pHead):
        # write code here
        if not pHead or not pHead.next:
            return None
        slow = fast = pHead
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                break
        if slow == fast:
            slow = pHead
            while slow != fast:
                slow = slow.next
                fast = fast.next
            return slow
        return None


.排序链表
# https://leetcode-cn.com/problems/sort-list/
# 在 O(nlogn) 时间复杂度和常数级空间复杂度下，对链表进行排序。
# 输入: 4->2->1->3
# 输出: 1->2->3->4
# 归并排序法：
# 之前一直觉得空间复杂度为常量不太可能，因为原来使用归并都是 O(N) 的，需要复制出相等的空间来进行赋值归并。对于链表，实际上是可以实现常数空间占用的（链表的归并排序不需要额外的空间）。
# 利用归并的思想，递归地将当前链表分为两段，然后Merge。使用slow-fast指针法分两段，slow每次走一步，fast每次走两步，直到fast走到末尾，slow所在位置就是中间位置，这样就分成了两段。
class Solution(object):
    def sortList(self, head):
        if not head or not head.next:
            return head
        slow = fast = head
        while fast and fast.next:
            pre = slow
            slow = slow.next
            fast = fast.next.next
        pre.next = None
        left = self.sortList(head)
        right = self.sortList(slow)
        return self.Merge(left, right)
    
    def Merge(self, left, right):
        dummy = ListNode(-1)
        tmp = dummy
        while left and right:
            if left.val < right.val:
                tmp.next = left
                left = left.next
                tmp = tmp.next
            else:
                tmp.next = right
                right = right.next
                tmp = tmp.next
        if left:
            tmp.next = left
        if right:
            tmp.next = right
        return dummy.next


.删除链表中的节点
# https://leetcode-cn.com/problems/delete-node-in-a-linked-list/
# 删除某个链表中给定的（非末尾）节点，将只给定要求被删除的节点。
class Solution(object):
    def deleteNode(self, node):
        node.val = node.next.val
        node.next = node.next.next


.删除链表中重复的结点
# https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&tqId=11209&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
# 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
class Solution:
    def deleteDuplication(self, pHead):
        # write code here
		# dummy pHead	  val
        # -1    1    2    3    3    4    4    5
        #       curr curr curr curr curr
        # pre   pre  pre
        dummy = ListNode(-1)
        dummy.next = pHead
        pre = dummy
        curr = dummy.next
        while curr and curr.next:
            if curr.val != curr.next.val:
                pre = pre.next
                curr = curr.next
            else:
                val = curr.val
                while curr and curr.val == val:
                    curr = curr.next
                pre.next = curr
        return dummy.next


.链表相加求和


.得到链表倒数第n个节点


.删除链表倒数第n个节点


.删除链表中重复的元素ii,去掉重复的节点


.重排链表


.链表划分


.翻转链表的n到m之间的节点
.K组翻转
class Solution():
	def ReverseN(self,head,n):
		if n==1:
			return head
		last=self.ReverseN(head.next,n-1)
		temp=head.next.next
		head.next.next=head
		head.next=temp
		return last
		
	def getknext(self,head,k):
		while head!=None and k>0:
			head=head.next
			k-=1
		if k==0 and head!=None:
			return head
		if k==0 and head==None:
			return 1 
		return None
		
	def ReverseKGroup(self,head,k):
		if k==1:
			return head
		nexthead=self.getknext(head,k)
		if nexthead==None:
			return head
		newhead=self.ReverseN(head,k)
		if nexthead!=1:
			head.next=self.ReverseKGroup(nexthead,k)
		else:
			head.next=None
		return newhead














